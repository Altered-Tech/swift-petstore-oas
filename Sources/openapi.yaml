openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://127.0.0.1:3000
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
      
paths:
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
#        '200': &200Pet
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
#        '400': &400Error
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
#        '404': &404Error
        '404':
          description: Not found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
#        '422': &422Error
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
#        '500': &500Error
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
#        '502': &502Error
        '502':
          description: Bad Gateway Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    post:
      tags:
        - pet
      summary: Add a new pet to the store endpoint
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
#        '200': *200Pet
#        '400': *400Error
#        '404': *404Error
#        '422': *422Error
#        '500': *500Error
#        '502': *502Error
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: Bad Gateway Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
        
  /pet/findbystatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          example: available
          schema:
            $ref: '#/components/schemas/PetStatus'
      responses:
#        '200': &200Pets
#        '400': *400Error
#        '404': *404Error
#        '500': *500Error
#        '502': *502Error
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Pets'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: Bad Gateway Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
  /pet/findbytags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          example:
            - funny
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            example:
              - funny
              - smart
            items:
              type: string
      responses:
#        '200': *200Pets
#        '400': *400Error
#        '404': *404Error
#        '500': *500Error
#        '502': *502Error
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Pets'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: Bad Gateway Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          example: 0
          schema:
            type: integer
            format: int64
      responses:
#        '200': *200Pet
#        '400': *400Error
#        '404': *404Error
#        '500': *500Error
#        '502': *502Error
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '502':
          description: Bad Gateway Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        
components:
  schemas:
    Error:
      description: Error message format
      type: object
      example:
        message: I am a teapot
        code: 412
      required:
        - message
        - code
      properties:
        message:
          type: string
          example: teapot
        code:
          type: integer
          example: 412
          
    Category:
      description: What kind of pet it is
      type: object
      example:
        id: 0
        name: Dog
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
          
    Tag:
      description: A quality of the pet
      type: object
      example:
        id: 0
        name: funny
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    
    Pets:
      description: A list of Pet objects
      type: array
      example:
        - id: 2
          name: Koda
          status: sold
          tags:
            - id: 0
              name: funny
            - id: 1
              name: smart
          photoUrls:
            - "https://example.com"
          category:
            id: 0
            name: Dog
      items:
        $ref: '#/components/schemas/Pet'
          
    Pet:
      description: The pet object that is defined.
      required:
        - name
        - photoUrls
        - status
      type: object
      example:
        # - id: 2
        #   name: Koda
        #   status: sold
        #   tags:
        #     - id: 0
        #       name: funny
        #     - id: 1
        #       name: smart
        #   photoUrls:
        #     - "https://example.com"
        #   category:
        #     id: 0
        #     name: Dog
          id: 0
          name: Arlo
          status: available
          tags:
            - id: 2
              name: Smart
          photoUrls:
            - "http://images4.fanpop.com/image/photos/16000000/Beautiful-Cat-cats-16096437-1280-800.jpg"
          category:
            id: 1
            name: Cat
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        status:
          $ref: '#/components/schemas/PetStatus'
          
    PetStatus:
      type: string
      description: Pet status in the store
      example: sold
      enum:
        - available
        - pending
        - sold
